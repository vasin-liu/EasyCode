{"author":"Gensokyo V.L.","version":"1.2.9","fileVersion":"1.0.0","userSecure":"","currTypeMapperGroupName":"Default","currTemplateGroupName":"Default","currColumnConfigGroupName":"Default","currGlobalConfigGroupName":"Default","typeMapper":{"Default":{"name":"Default","elementList":[{"matchType":"REGEX","columnType":"varchar(\\(\\d+\\))?","javaType":"java.lang.String"},{"matchType":"REGEX","columnType":"char(\\(\\d+\\))?","javaType":"java.lang.String"},{"matchType":"REGEX","columnType":"(tiny|medium|long)*text(\\(max\\))*","javaType":"java.lang.String"},{"matchType":"REGEX","columnType":"(String|FixedString)(\\(\\d+\\))?","javaType":"java.lang.String"},{"matchType":"ORDINARY","columnType":"string","javaType":"java.lang.String"},{"matchType":"REGEX","columnType":"Decimal|Decimal\\d+\\(\\d+\\)?|decimal(\\(\\d+,\\d+\\))?","javaType":"java.math.BigDecimal"},{"matchType":"ORDINARY","columnType":"integer","javaType":"java.lang.Integer"},{"matchType":"REGEX","columnType":"(tiny|small|medium)*int(\\(\\d+\\))?","javaType":"java.lang.Integer"},{"matchType":"REGEX","columnType":"(uint|int)16?","javaType":"java.lang.Integer"},{"matchType":"ORDINARY","columnType":"int4","javaType":"java.lang.Integer"},{"matchType":"ORDINARY","columnType":"int8","javaType":"java.lang.Long"},{"matchType":"REGEX","columnType":"(uint|int)(32|64)?","javaType":"java.lang.Long"},{"matchType":"REGEX","columnType":"bigint(\\(\\d+\\))?","javaType":"java.lang.Long"},{"matchType":"REGEX","columnType":"float|float32|float64|float\\d+","javaType":"java.lang.Double"},{"matchType":"ORDINARY","columnType":"date","javaType":"java.util.Date"},{"matchType":"REGEX","columnType":"datetime|datetime\\d+|datetime(\\(\\d+\\))?|datetime(\\(\\d+\\,\\d+\\))?","javaType":"java.util.Date"},{"matchType":"ORDINARY","columnType":"timestamp","javaType":"java.util.Date"},{"matchType":"ORDINARY","columnType":"time","javaType":"java.time.LocalTime"},{"matchType":"ORDINARY","columnType":"boolean","javaType":"java.lang.Boolean"}]}},"template":{"spring-data-mongodb":{"name":"spring-data-mongodb","elementList":[{"name":"controller.java.vm","code":"##导入宏定义、设置包名、类名、文件名##导入宏定义\n$!{define.vm}\n#setPackageSuffix(\"controller\")\n#setTableSuffix(\"Controller\")\n#save(\"/controller\", \"Controller.java\")\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n##定义服务名\n#set($serviceSortType = $!tool.append($!tableInfo.name, \"Service\"))\n#set($serviceType = $!tool.append($!tableInfo.savePackageName, \".service.\", $serviceSortType))\n#set($serviceVarName = $!tool.firstLowerCase($serviceSortType))\n\n#set($entityShortType = $!tableInfo.name)\n#set($entityType = $!tableInfo.psiClassObj.getQualifiedName())\n#set($entityVarName = $!tool.firstLowerCase($!tableInfo.name))\n#set($pkType = $!pk.type)\n\nimport $pkType;\nimport $entityType;\nimport $serviceType;\nimport lombok.AllArgsConstructor;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n/**\n * $!{tableInfo.comment}控制层\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@RestController\n@RequestMapping(\"/$!tool.firstLowerCase($!tableInfo.name)\")\n@AllArgsConstructor\npublic class $!{tableName} {\n\n\tprivate $serviceSortType $serviceVarName;\n\n\t/**\n\t * 获取$!{tableInfo.comment}列表(分页)\n\t */\n\t@GetMapping(\"/list\")\n\tpublic Page<$entityShortType> list(Pageable page) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * 获取$!{tableInfo.comment}\n\t */\n\t@GetMapping(\"/get\")\n\tpublic $entityShortType get($!pk.shortType id) {\n\t\treturn ${serviceVarName}.findById(id);\n\t}\n\n\t/**\n\t * 添加$!{tableInfo.comment}\n\t */\n\t@PostMapping(\"/add\")\n\tpublic void add(@RequestBody $entityShortType $entityVarName) {\n\t\t${serviceVarName}.save($entityVarName);\n\t}\n\n\n\t/**\n\t * 修改$!{tableInfo.comment}\n\t */\n\t@PostMapping(\"/update\")\n\tpublic void update(@RequestBody $entityShortType $entityVarName) {\n\t\t${serviceVarName}.save($entityVarName);\n\t}\n\n\t/**\n\t * 删除$!{tableInfo.comment}\n\t */\n\t@PostMapping(\"/delete\")\n\tpublic void delete($!pk.shortType id) {\n\t\t${serviceVarName}.deleteById(id);\n\t}\n\n}\n"},{"name":"entity.java.vm","code":"##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/entity\", \".java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"entity\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport java.io.Serializable;\n\n##使用宏定义实现类注释信息\n#tableComment(\"实体类\")\npublic class $!{tableInfo.name} implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n#foreach($column in $tableInfo.fullColumn)\n##使用宏定义实现get,set方法\n#getSetMethod($column)\n#end\n\n}\n"},{"name":"repository.java.vm","code":"##导入宏定义、设置包名、类名、文件名##导入宏定义\n$!{define.vm}\n#setPackageSuffix(\"repository\")\n#setTableSuffix(\"Repository\")\n#save(\"/repository\", \"Repository.java\")\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n##实体类名、主键类名\n#set($entityShortType = $!tableInfo.name)\n#set($entityType = $!tableInfo.psiClassObj.getQualifiedName())\n#set($pkShortType = $!pk.shortType)\n#set($pkType = $!pk.type)\n\nimport $pkType;\nimport $entityType;\nimport org.springframework.data.mongodb.repository.MongoRepository;\n\n\n/**\n * $!{tableInfo.comment}持久层\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} extends MongoRepository<$entityShortType, $pkShortType> {\n\n}\n"},{"name":"service.java.vm","code":"##导入宏定义、设置包名、类名、文件名##导入宏定义\n$!{define.vm}\n#setPackageSuffix(\"service\")\n#setTableSuffix(\"Service\")\n#save(\"/service\", \"Service.java\")\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n##实体类名、主键类名\n#set($entityShortType = $!tableInfo.name)\n#set($entityType = $!tableInfo.psiClassObj.getQualifiedName())\n#set($entityVarName = $!tool.firstLowerCase($!tableInfo.name))\n#set($pkShortType = $!pk.shortType)\n#set($pkType = $!pk.type)\n\nimport $pkType;\nimport $entityType;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport java.util.Collection;\nimport java.util.List;\n\n\n/**\n * $!{tableInfo.comment}业务层\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} {\n\n    void save($entityShortType $entityVarName);\n\n    void deleteById($pkShortType id);\n\n    $entityShortType findById($pkShortType id);\n\n    List<$entityShortType> findById(Collection<$pkShortType> ids);\n\n    Page<$entityShortType> list(Pageable page);\n\n}\n"},{"name":"serviceImpl.java.vm","code":"##导入宏定义、设置包名、类名、文件名\n$!{define.vm}\n#setPackageSuffix(\"service.impl\")\n#setTableSuffix(\"ServiceImpl\")\n#save(\"/service/impl\", \"ServiceImpl.java\")\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n##业务层类名、持久层类名、实体名\n#set($serviceSortType = $!tool.append($!tableInfo.name, \"Service\"))\n#set($serviceType = $!tool.append($!tableInfo.savePackageName, \".service.\", $serviceSortType))\n#set($repositorySortType = $!tool.append($!tableInfo.name, \"Repository\"))\n#set($repositoryType = $!tool.append($!tableInfo.savePackageName, \".repository.\", $repositorySortType))\n#set($repositoryVarName = $!tool.firstLowerCase($!repositorySortType))\n#set($entityShortType = $!tableInfo.name)\n#set($entityType = $!tableInfo.psiClassObj.getQualifiedName())\n#set($entityVarName = $!tool.firstLowerCase($!tableInfo.name))\n#set($pkShortType = $!pk.shortType)\n#set($pkType = $!pk.type)\n\nimport $pkType;\nimport $entityType;\nimport $serviceType;\nimport $repositoryType;\nimport org.springframework.stereotype.Service;\nimport javax.annotation.Resource;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.StreamSupport;\n\n\n/**\n * $!{tableInfo.comment}业务层\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Service\npublic class $!{tableName} implements $!serviceSortType {\n\n\t@Resource\n    private $repositorySortType $repositoryVarName;\n\n    @Override\n    public void save($entityShortType $entityVarName) {\n        $!{repositoryVarName}.save($entityVarName);\n    }\n\n    @Override\n    public void deleteById($pkShortType id) {\n        $!{repositoryVarName}.delete(id);\n    }\n\n    @Override\n    public $entityShortType findById($pkShortType id) {\n        return $!{repositoryVarName}.findOne(id);\n    }\n\n    @Override\n    public List<$entityShortType> findById(Collection<$pkShortType> ids) {\n        Iterable<$entityShortType> iterable = $!{repositoryVarName}.findAll(ids);\n        return StreamSupport.stream(iterable.spliterator(), false)\n                .collect(Collectors.toList());\n    }\n\n    @Override\n    public Page<$entityShortType> list(Pageable page) {\n        return $!{repositoryVarName}.findAll(page);\n    }\n\n}\n"}]},"MybatisPlus-Mixed":{"name":"MybatisPlus-Mixed","elementList":[{"name":"controller.java.vm","code":"##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Controller\")\n\n##保存文件（宏定义）\n#save(\"/controller\", \"Controller.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"controller\")\n\n##定义服务名\n#set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \"Service\"))\n\n##定义实体对象名\n#set($entityName = $!tool.firstLowerCase($!tableInfo.name))\n\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.extension.api.ApiController;\nimport com.baomidou.mybatisplus.extension.api.R;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.annotation.Resource;\nimport java.io.Serializable;\nimport java.util.List;\n\n##表注释（宏定义）\n#tableComment(\"表控制层\")\n@RestController\n@RequestMapping(\"$!tool.firstLowerCase($!tableInfo.name)\")\npublic class $!{tableName} extends ApiController {\n    /**\n     * 服务对象\n     */\n    @Resource\n    private $!{tableInfo.name}Service $!{serviceName};\n\n    /**\n     * 分页查询所有数据\n     *\n     * @param page 分页对象\n     * @param $!entityName 查询实体\n     * @return 所有数据\n     */\n    @GetMapping\n    public R selectAll(Page<$!tableInfo.name> page, $!tableInfo.name $!entityName) {\n        return success(this.$!{serviceName}.page(page, new QueryWrapper<>($!entityName)));\n    }\n\n    /**\n     * 通过主键查询单条数据\n     *\n     * @param id 主键\n     * @return 单条数据\n     */\n    @GetMapping(\"{id}\")\n    public R selectOne(@PathVariable Serializable id) {\n        return success(this.$!{serviceName}.getById(id));\n    }\n\n    /**\n     * 新增数据\n     *\n     * @param $!entityName 实体对象\n     * @return 新增结果\n     */\n    @PostMapping\n    public R insert(@RequestBody $!tableInfo.name $!entityName) {\n        return success(this.$!{serviceName}.save($!entityName));\n    }\n\n    /**\n     * 修改数据\n     *\n     * @param $!entityName 实体对象\n     * @return 修改结果\n     */\n    @PutMapping\n    public R update(@RequestBody $!tableInfo.name $!entityName) {\n        return success(this.$!{serviceName}.updateById($!entityName));\n    }\n\n    /**\n     * 删除数据\n     *\n     * @param idList 主键结合\n     * @return 删除结果\n     */\n    @DeleteMapping\n    public R delete(@RequestParam(\"idList\") List<Long> idList) {\n        return success(this.$!{serviceName}.removeByIds(idList));\n    }\n}\n"},{"name":"dao.java.vm","code":"##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Dao\")\n\n##保存文件（宏定义）\n#save(\"/dao\", \"Dao.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"dao\")\n\nimport java.util.List;\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport org.apache.ibatis.annotations.Param;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\n\n##表注释（宏定义）\n#tableComment(\"表数据库访问层\")\npublic interface $!{tableName} extends BaseMapper<$!tableInfo.name> {\n\n/**\n* 批量新增数据（MyBatis原生foreach方法）\n*\n* @param entities List<$!{tableInfo.name}> 实例对象列表\n* @return 影响行数\n*/\nint insertBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities);\n\n/**\n* 批量新增或按主键更新数据（MyBatis原生foreach方法）\n*\n* @param entities List<$!{tableInfo.name}> 实例对象列表\n* @return 影响行数\n* @throws org.springframework.jdbc.BadSqlGrammarException 入参是空List的时候会抛SQL语句错误的异常，请自行校验入参\n*/\nint insertOrUpdateBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities);\n\n}\n"},{"name":"entity.java.vm","code":"##导入宏定义\n$!{define.vm}\n\n##保存文件（宏定义）\n#save(\"/entity\", \".java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"entity\")\n\n##自动导入包（全局变量）\n$!autoImport\nimport com.baomidou.mybatisplus.extension.activerecord.Model;\nimport java.io.Serializable;\n\n##表注释（宏定义）\n#tableComment(\"表实体类\")\n@SuppressWarnings(\"serial\")\npublic class $!{tableInfo.name} extends Model<$!{tableInfo.name}> {\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})//${column.comment}#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n#foreach($column in $tableInfo.fullColumn)\n#getSetMethod($column)\n#end\n\n#foreach($column in $tableInfo.pkColumn)\n    /**\n     * 获取主键值\n     *\n     * @return 主键值\n     */\n    @Override\n    protected Serializable pkVal() {\n        return this.$!column.name;\n    }\n    #break\n#end\n}\n"},{"name":"mapper.xml.vm","code":"##引入mybatis支持\n$!{mybatisSupport.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Dao.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao\">\n\n    <resultMap type=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}\" id=\"$!{tableInfo.name}Map\">\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n\n    <!-- 批量插入 -->\n    <insert id=\"insertBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.parent.name}.$!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n        (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n    </insert>\n    <!-- 批量插入或按主键更新 -->\n    <insert id=\"insertOrUpdateBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.parent.name}.$!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n            (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n        on duplicate key update\n         #foreach($column in $tableInfo.otherColumn)$!column.obj.name = values($!column.obj.name) #if($velocityHasNext), #end#end\n    </insert>\n\n</mapper>\n"},{"name":"service.java.vm","code":"##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Service\")\n\n##保存文件（宏定义）\n#save(\"/service\", \"Service.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service\")\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\n\n##表注释（宏定义）\n#tableComment(\"表服务接口\")\npublic interface $!{tableName} extends IService<$!tableInfo.name> {\n\n}\n"},{"name":"serviceImpl.java.vm","code":"##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"ServiceImpl\")\n\n##保存文件（宏定义）\n#save(\"/service/impl\", \"ServiceImpl.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service.impl\")\n\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.stereotype.Service;\n\n##表注释（宏定义）\n#tableComment(\"表服务实现类\")\n@Service(\"$!tool.firstLowerCase($tableInfo.name)Service\")\npublic class $!{tableName} extends ServiceImpl<$!{tableInfo.name}Dao, $!{tableInfo.name}> implements $!{tableInfo.name}Service {\n\n}\n"}]},"MybatisPlus":{"name":"MybatisPlus","elementList":[{"name":"controller.java.vm","code":"##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Controller\")\n\n##保存文件（宏定义）\n#save(\"/controller\", \"Controller.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"controller\")\n\n##定义服务名\n#set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \"Service\"))\n\n##定义实体对象名\n#set($entityName = $!tool.firstLowerCase($!tableInfo.name))\n\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.extension.api.ApiController;\nimport com.baomidou.mybatisplus.extension.api.R;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.annotation.Resource;\nimport java.io.Serializable;\nimport java.util.List;\n\n##表注释（宏定义）\n#tableComment(\"表控制层\")\n@RestController\n@RequestMapping(\"$!tool.firstLowerCase($!tableInfo.name)\")\npublic class $!{tableName} extends ApiController {\n    /**\n     * 服务对象\n     */\n    @Resource\n    private $!{tableInfo.name}Service $!{serviceName};\n\n    /**\n     * 分页查询所有数据\n     *\n     * @param page 分页对象\n     * @param $!entityName 查询实体\n     * @return 所有数据\n     */\n    @GetMapping\n    public R selectAll(Page<$!tableInfo.name> page, $!tableInfo.name $!entityName) {\n        return success(this.$!{serviceName}.page(page, new QueryWrapper<>($!entityName)));\n    }\n\n    /**\n     * 通过主键查询单条数据\n     *\n     * @param id 主键\n     * @return 单条数据\n     */\n    @GetMapping(\"{id}\")\n    public R selectOne(@PathVariable Serializable id) {\n        return success(this.$!{serviceName}.getById(id));\n    }\n\n    /**\n     * 新增数据\n     *\n     * @param $!entityName 实体对象\n     * @return 新增结果\n     */\n    @PostMapping\n    public R insert(@RequestBody $!tableInfo.name $!entityName) {\n        return success(this.$!{serviceName}.save($!entityName));\n    }\n\n    /**\n     * 修改数据\n     *\n     * @param $!entityName 实体对象\n     * @return 修改结果\n     */\n    @PutMapping\n    public R update(@RequestBody $!tableInfo.name $!entityName) {\n        return success(this.$!{serviceName}.updateById($!entityName));\n    }\n\n    /**\n     * 删除数据\n     *\n     * @param idList 主键结合\n     * @return 删除结果\n     */\n    @DeleteMapping\n    public R delete(@RequestParam(\"idList\") List<Long> idList) {\n        return success(this.$!{serviceName}.removeByIds(idList));\n    }\n}\n"},{"name":"dao.java.vm","code":"##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Dao\")\n\n##保存文件（宏定义）\n#save(\"/dao\", \"Dao.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"dao\")\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\n\n##表注释（宏定义）\n#tableComment(\"表数据库访问层\")\npublic interface $!{tableName} extends BaseMapper<$!tableInfo.name> {\n\n}\n"},{"name":"entity.java.vm","code":"##导入宏定义\n$!{define.vm}\n\n##保存文件（宏定义）\n#save(\"/entity\", \".java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"entity\")\n\n##自动导入包（全局变量）\n$!{autoImport.vm}\nimport com.baomidou.mybatisplus.extension.activerecord.Model;\nimport java.io.Serializable;\n\n##表注释（宏定义）\n#tableComment(\"表实体类\")\n@SuppressWarnings(\"serial\")\npublic class $!{tableInfo.name} extends Model<$!{tableInfo.name}> {\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})//${column.comment}#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n#foreach($column in $tableInfo.fullColumn)\n#getSetMethod($column)\n#end\n\n#foreach($column in $tableInfo.pkColumn)\n    /**\n     * 获取主键值\n     *\n     * @return 主键值\n     */\n    @Override\n    protected Serializable pkVal() {\n        return this.$!column.name;\n    }\n    #break\n#end\n}\n"},{"name":"service.java.vm","code":"##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Service\")\n\n##保存文件（宏定义）\n#save(\"/service\", \"Service.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service\")\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\n\n##表注释（宏定义）\n#tableComment(\"表服务接口\")\npublic interface $!{tableName} extends IService<$!tableInfo.name> {\n\n}\n"},{"name":"serviceImpl.java.vm","code":"##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"ServiceImpl\")\n\n##保存文件（宏定义）\n#save(\"/service/impl\", \"ServiceImpl.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service.impl\")\n\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.stereotype.Service;\n\n##表注释（宏定义）\n#tableComment(\"表服务实现类\")\n@Service(\"$!tool.firstLowerCase($tableInfo.name)Service\")\npublic class $!{tableName} extends ServiceImpl<$!{tableInfo.name}Dao, $!{tableInfo.name}> implements $!{tableInfo.name}Service {\n\n}\n"}]},"Default":{"name":"Default","elementList":[{"name":"controller.java.vm","code":"##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Controller\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/controller\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.annotation.Resource;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表控制层\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@RestController\n@RequestMapping(\"$!tool.firstLowerCase($tableInfo.name)\")\npublic class $!{tableName} {\n    /**\n     * 服务对象\n     */\n    @Resource\n    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;\n\n    /**\n     * 分页查询\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} 筛选条件\n     * @param pageRequest      分页对象\n     * @return 查询结果\n     */\n    @GetMapping\n    public ResponseEntity<Page<$!{tableInfo.name}>> queryByPage($!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}, PageRequest pageRequest) {\n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.queryByPage($!{tool.firstLowerCase($tableInfo.name)}, pageRequest));\n    }\n\n    /**\n     * 通过主键查询单条数据\n     *\n     * @param id 主键\n     * @return 单条数据\n     */\n    @GetMapping(\"{id}\")\n    public ResponseEntity<$!{tableInfo.name}> queryById(@PathVariable(\"id\") $!pk.shortType id) {\n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.queryById(id));\n    }\n\n    /**\n     * 新增数据\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} 实体\n     * @return 新增结果\n     */\n    @PostMapping\n    public ResponseEntity<$!{tableInfo.name}> add($!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}) {\n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.insert($!{tool.firstLowerCase($tableInfo.name)}));\n    }\n\n    /**\n     * 编辑数据\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} 实体\n     * @return 编辑结果\n     */\n    @PutMapping\n    public ResponseEntity<$!{tableInfo.name}> edit($!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}) {\n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.update($!{tool.firstLowerCase($tableInfo.name)}));\n    }\n\n    /**\n     * 删除数据\n     *\n     * @param id 主键\n     * @return 删除是否成功\n     */\n    @DeleteMapping\n    public ResponseEntity<Boolean> deleteById($!pk.shortType id) {\n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.deleteById(id));\n    }\n\n}\n"},{"name":"dao.java.vm","code":"##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Dao\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/dao\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dao;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport org.apache.ibatis.annotations.Param;\nimport org.springframework.data.domain.Pageable;\nimport java.util.List;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表数据库访问层\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} {\n\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    $!{tableInfo.name} queryById($!pk.shortType $!pk.name);\n\n    /**\n     * 查询指定行数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 查询条件\n     * @param pageable         分页对象\n     * @return 对象列表\n     */\n    List<$!{tableInfo.name}> queryAllByLimit($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}), @Param(\"pageable\") Pageable pageable);\n\n    /**\n     * 统计总行数\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 查询条件\n     * @return 总行数\n     */\n    long count($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 新增数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 影响行数\n     */\n    int insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 批量新增数据（MyBatis原生foreach方法）\n     *\n     * @param entities List<$!{tableInfo.name}> 实例对象列表\n     * @return 影响行数\n     */\n    int insertBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities);\n\n    /**\n     * 批量新增或按主键更新数据（MyBatis原生foreach方法）\n     *\n     * @param entities List<$!{tableInfo.name}> 实例对象列表\n     * @return 影响行数\n     * @throws org.springframework.jdbc.BadSqlGrammarException 入参是空List的时候会抛SQL语句错误的异常，请自行校验入参\n     */\n    int insertOrUpdateBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities);\n\n    /**\n     * 修改数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 影响行数\n     */\n    int update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 通过主键删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 影响行数\n     */\n    int deleteById($!pk.shortType $!pk.name);\n\n}\n"},{"name":"debug.json.vm","code":"// 禁止将生成结果写入到文件\n$!callback.setWriteFile(false)\n\n//调试表原始对象\n$!tool.debug($tableInfo.obj)\n\n//调试列原始对象\n$!tool.debug($tableInfo.fullColumn.get(0).obj)\n\n//调试列原始列类型\n$!tool.debug($tableInfo.fullColumn.get(0).obj.dataType)\n\n//获取原始列类型中的字段\nsqlType = $!tool.getField($tableInfo.fullColumn.get(0).obj.dataType, \"typeName\")\n\n//执行原始列类型中的方法\nsqlTypeLen = $!tableInfo.fullColumn.get(0).obj.dataType.getLength()\n"},{"name":"entity.java.vm","code":"##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/entity\", \".java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"entity\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport java.io.Serializable;\n\n##使用宏定义实现类注释信息\n#tableComment(\"实体类\")\npublic class $!{tableInfo.name} implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n#foreach($column in $tableInfo.fullColumn)\n##使用宏定义实现get,set方法\n#getSetMethod($column)\n#end\n\n}\n"},{"name":"mapper.xml.vm","code":"##引入mybatis支持\n$!{mybatisSupport.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Dao.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao\">\n\n    <resultMap type=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}\" id=\"$!{tableInfo.name}Map\">\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n\n    <!--查询单个-->\n    <select id=\"queryById\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        where $!pk.obj.name = #{$!pk.name}\n    </select>\n\n    <!--查询指定行数据-->\n    <select id=\"queryAllByLimit\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        <where>\n#foreach($column in $tableInfo.fullColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                and $!column.obj.name = #{$!column.name}\n            </if>\n#end\n        </where>\n        limit #{pageable.offset}, #{pageable.pageSize}\n    </select>\n\n    <!--统计总行数-->\n    <select id=\"count\" resultType=\"java.lang.Long\">\n        select count(1)\n        from $!tableInfo.obj.name\n        <where>\n#foreach($column in $tableInfo.fullColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                and $!column.obj.name = #{$!column.name}\n            </if>\n#end\n        </where>\n    </select>\n\n    <!--新增所有列-->\n    <insert id=\"insert\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values (#foreach($column in $tableInfo.otherColumn)#{$!{column.name}}#if($velocityHasNext), #end#end)\n    </insert>\n\n    <insert id=\"insertBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n        (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n    </insert>\n\n    <insert id=\"insertOrUpdateBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n            (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n        on duplicate key update\n        #foreach($column in $tableInfo.otherColumn)$!column.obj.name = values($!column.obj.name)#if($velocityHasNext),\n        #end#end\n\n    </insert>\n\n    <!--通过主键修改数据-->\n    <update id=\"update\">\n        update $!{tableInfo.obj.name}\n        <set>\n#foreach($column in $tableInfo.otherColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                $!column.obj.name = #{$!column.name},\n            </if>\n#end\n        </set>\n        where $!pk.obj.name = #{$!pk.name}\n    </update>\n\n    <!--通过主键删除-->\n    <delete id=\"deleteById\">\n        delete from $!{tableInfo.obj.name} where $!pk.obj.name = #{$!pk.name}\n    </delete>\n\n</mapper>\n"},{"name":"service.java.vm","code":"##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Service\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务接口\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} {\n\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    $!{tableInfo.name} queryById($!pk.shortType $!pk.name);\n\n    /**\n     * 分页查询\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 筛选条件\n     * @param pageRequest      分页对象\n     * @return 查询结果\n     */\n    Page<$!{tableInfo.name}> queryByPage($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}), PageRequest pageRequest);\n\n    /**\n     * 新增数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    $!{tableInfo.name} insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 修改数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    $!{tableInfo.name} update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 通过主键删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 是否成功\n     */\n    boolean deleteById($!pk.shortType $!pk.name);\n\n}"},{"name":"serviceImpl.java.vm","code":"##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"ServiceImpl\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service/impl\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.stereotype.Service;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageImpl;\nimport org.springframework.data.domain.PageRequest;\n\nimport javax.annotation.Resource;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务实现类\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Service(\"$!tool.firstLowerCase($!{tableInfo.name})Service\")\npublic class $!{tableName} implements $!{tableInfo.name}Service {\n    @Resource\n    private $!{tableInfo.name}Dao $!tool.firstLowerCase($!{tableInfo.name})Dao;\n\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    @Override\n    public $!{tableInfo.name} queryById($!pk.shortType $!pk.name) {\n        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.queryById($!pk.name);\n    }\n\n    /**\n     * 分页查询\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} 筛选条件\n     * @param pageRequest      分页对象\n     * @return 查询结果\n     */\n    @Override\n    public Page<$!{tableInfo.name}> queryByPage($!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}, PageRequest pageRequest) {\n        long total = this.$!{tool.firstLowerCase($tableInfo.name)}Dao.count($!{tool.firstLowerCase($tableInfo.name)});\n        return new PageImpl<>(this.$!{tool.firstLowerCase($tableInfo.name)}Dao.queryAllByLimit($!{tool.firstLowerCase($tableInfo.name)}, pageRequest), pageRequest, total);\n    }\n\n    /**\n     * 新增数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    @Override\n    public $!{tableInfo.name} insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.insert($!tool.firstLowerCase($!{tableInfo.name}));\n        return $!tool.firstLowerCase($!{tableInfo.name});\n    }\n\n    /**\n     * 修改数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    @Override\n    public $!{tableInfo.name} update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.update($!tool.firstLowerCase($!{tableInfo.name}));\n        return this.queryById($!{tool.firstLowerCase($!{tableInfo.name})}.get$!tool.firstUpperCase($pk.name)());\n    }\n\n    /**\n     * 通过主键删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 是否成功\n     */\n    @Override\n    public boolean deleteById($!pk.shortType $!pk.name) {\n        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.deleteById($!pk.name) > 0;\n    }\n}"}]},"PCI":{"name":"PCI","elementList":[{"name":"Controller.java.vm","code":"/*\n * Copyright © ${year} PCI Technology Group Co.,Ltd. All Rights Reserved.\n * Site: http://www.pcitech.com/\n * Address：PCI Intelligent Building, No.2 Xincen Fourth Road, Tianhe District, Guangzhou，China（Zip code：510653）\n */\n##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Controller\")\n\n##保存文件（宏定义）\n#save(\"/controller\", \"Controller.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"controller\")\n\n##定义包路径\n#set($package = $!{tableInfo.savePackageName})\n\n##定义类名\n#set($className = $!{tableInfo.name})\n\n##定义注释内容\n#set($comments = $!{tableInfo.comment})\n\n##定义服务名\n#set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \"Service\"))\n\n##定义实体对象名\n#set($entityName = $!tool.firstLowerCase($!tableInfo.name))\n\n##初始化列状态\n#initColumnState()\n\n$!autoImport\nimport com.suntek.common.core.base.Result;\nimport com.suntek.common.core.base.ReqBody;\nimport com.suntek.common.core.constant.PublicConstants;\nimport com.suntek.common.core.util.CopyUtil;\nimport com.suntek.common.dao.base.PageDTO;\n#if($callback.exportExcelWithTemplate)\nimport com.alibaba.excel.support.ExcelTypeEnum;\nimport com.suntek.common.web.constant.TemplateConstants;\nimport com.suntek.common.web.excel.enhance.annotation.ExcelResponse;\nimport com.suntek.common.web.excel.enhance.annotation.FillSheetParam;\nimport com.suntek.common.web.excel.enhance.metadata.FillCompositeWrapper;\n#else\nimport com.suntek.common.export.util.DownloadUtil;\nimport javax.servlet.http.HttpServletResponse;\n#end\nimport ${package}.model.po.${className}PO;\nimport ${package}.model.dto.${className}DTO;\nimport ${package}.model.vo.${className}VO;\nimport ${package}.model.vo.${className}PageVO;\nimport ${package}.service.${className}Service;\nimport org.springframework.web.bind.annotation.*;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport io.swagger.annotations.ApiImplicitParam;\nimport io.swagger.annotations.ApiImplicitParams;\nimport lombok.extern.slf4j.Slf4j;\nimport com.suntek.common.core.annotation.TranslateDict;\n\nimport javax.annotation.Resource;\nimport java.io.File;\nimport java.util.List;\n\n##表注释（宏定义）\n#tableComment(\"控制层\")\n@Slf4j\n@RestController\n@RequestMapping(\"${tool.getUri($tableInfo.preName,$tableInfo.obj.name)}\")\n@Api(value = \"${className}Controller\", tags = {\"${comments}\"})\npublic class ${className}Controller {\n\n    /**\n     * 服务对象\n     */\n    @Resource\n    private $!{tableInfo.name}Service $!{serviceName};\n\n    /**\n     * 分页查询${comments}\n     *\n     * @param param 分页对象\n     * @return Result<PageDTO <${className}DTO>>\n     */\n    @PostMapping(\"/page\")\n    @ApiOperation(value = \"分页查询${comments}\", notes = \"分页查询${comments}\")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name = \"param\", value = \"查询条件\", required = true)\n    })\n    public Result<PageDTO<${className}DTO>> listPage(@RequestBody ReqBody<${className}PageVO> param) {\n        return Result.success($!{serviceName}.listPage(param.getData()));\n    }\n\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $!{tableInfo.pkColumn.get(0)})\n    /**\n     * 通过id查询${comments}\n     *\n     * @param ${pk.name} id\n     * @return Result<${className}DTO>\n     */\n    @GetMapping(\"/{${pk.name}}\")\n    @ApiOperation(value = \"通过id查询${comments}\", notes = \"通过id查询${comments}\")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name = \"${pk.name}\", value = \"主键id\", required = true)\n    })\n    @TranslateDict\n    public Result<${className}DTO> getById(@PathVariable(\"${pk.name}\") ${pk.shortType} ${pk.name}) {\n        return Result.success($!{serviceName}.detail(${pk.name}));\n    }\n#end\n\n    /**\n     * 新增${comments}\n     *\n     * @param param ${comments}\n     * @return Result<Boolean>\n     */\n    @PostMapping(\"/save\")\n    @ApiOperation(value = \"新增${comments}\", notes = \"新增${comments}\")\n    public Result<Boolean> save(@RequestBody ReqBody<${className}VO> param) {\n        return Result.success($!{serviceName}.add(param.getData()));\n    }\n\n    /**\n     * 批量新增${comments}\n     *\n     * @param param ${comments}\n     * @return Result<Boolean>\n     */\n    @PostMapping(\"/batch/save\")\n    @ApiOperation(value = \"批量新增${comments}\", notes = \"批量新增${comments}\")\n    public Result<Boolean> saveBatch(@RequestBody ReqBody<List<${className}VO>> param) {\n        return Result.success($!{serviceName}.addBatch(param.getData()));\n    }\n\n    /**\n     * 修改${comments}\n     *\n     * @param param ${comments}\n     * @return Result<Boolean>\n     */\n    @PostMapping(\"/update\")\n    @ApiOperation(value = \"修改${comments}\", notes = \"修改${comments}\")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name = \"param\", value = \"更新内容，其中id必填\", required = true)\n    })\n    public Result<Boolean> update(@RequestBody ReqBody<${className}VO> param) {\n        return Result.success($!{serviceName}.updateById(CopyUtil.toBean(param.getData(), ${className}PO.class)));\n    }\n\n    /**\n     * 批量修改${comments}\n     *\n     * @param param ${comments}\n     * @return Result<Boolean>\n     */\n    @PostMapping(\"/batch/update\")\n    @ApiOperation(value = \"批量修改${comments}\", notes = \"批量修改${comments}\")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name = \"param\", value = \"批量更新内容，其中id必填\", required = true)\n    })\n    public Result<Boolean> updateBatch(@RequestBody ReqBody<List<${className}VO>> param) {\n        return Result.success($!{serviceName}.updateBatchById(CopyUtil.copyList(param.getData(), ${className}PO.class)));\n    }\n\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $!{tableInfo.pkColumn.get(0)})\n    #if($hasStatusColumn)\n    /**\n     * 通过id删除${comments}\n     * ps: 此接口为逻辑删除\n     *\n     * @param ${pk.name} id\n     * @return Result<Boolean>\n     */\n    @PostMapping(\"/delete/{${pk.name}}\")\n    @ApiOperation(value = \"删除${comments}\", notes = \"删除${comments}（逻辑删除）\")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name = \"${pk.name}\", value = \"主键id\", required = true)\n    })\n    public Result<Boolean> delete(@PathVariable ${pk.shortType} ${pk.name}) {\n        return Result.success($!{serviceName}.logicalRemoveById(${pk.name}));\n    }\n\n    /**\n     * 通过id集合批量删除${comments}\n     * ps: 此接口为逻辑删除\n     *\n     * @param params id集合\n     * @return Result<Boolean>\n     */\n    @PostMapping(\"/batch/delete\")\n    @ApiOperation(value = \"批量删除${comments}\", notes = \"批量删除${comments}（逻辑删除）\")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name = \"params\", value = \"主键id集合\", required = true)\n    })\n    public Result<Boolean> deleteBatch(@RequestBody ReqBody<List<${pk.shortType}>> params) {\n        return Result.success(${serviceName}.logicalRemoveByIds(params.getData()));\n    }\n    #else\n    /**\n     * 通过id删除${comments}\n     * ps: 此接口为物理删除\n     *\n     * @param ${pk.name} id\n     * @return Result<Boolean>\n     */\n    @PostMapping(\"/delete/{${pk.name}}\")\n    @ApiOperation(value = \"删除${comments}\", notes = \"删除${comments}（物理删除）\")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name = \"${pk.name}\", value = \"主键id\", required = true)\n    })\n    public Result<Boolean> delete(@PathVariable ${pk.shortType} ${pk.name}) {\n        return Result.success($!{serviceName}.removeById(${pk.name}));\n    }\n\n    /**\n     * 通过id集合批量删除${comments}\n     * ps: 此接口为物理删除\n     *\n     * @param params id集合\n     * @return Result<Boolean>\n     */\n    @PostMapping(\"/batch/delete\")\n    @ApiOperation(value = \"批量删除${comments}\", notes = \"批量删除${comments}（物理删除）\")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name = \"params\", value = \"主键id集合\", required = true)\n    })\n    public Result<Boolean> deleteBatch(@RequestBody ReqBody<List<${pk.shortType}>> params) {\n        return Result.success(${serviceName}.removeBatchByIds(params.getData()));\n    }\n    #end\n#end\n\n#if($callback.exportExcelWithTemplate)\n    /**\n     * 分页查询${comments}后导出excel\n     *\n     * @param param 分页对象\n     * @return FillCompositeWrapper\n     */\n    @PostMapping(\"/export\")\n    @ApiOperation(value = \"导出${comments}\", notes = \"导出${comments}\")\n    @ExcelResponse(\n            template = {TemplateConstants.ExcelConstants.FILL_TEMPLATE_DIR, \"${comments}导出模板.xlsx\"},\n            suffix = ExcelTypeEnum.XLSX,\n            fileName = \"${comments}\",\n            fillSheets = @FillSheetParam)\n    public FillCompositeWrapper export(@RequestBody ReqBody<${className}PageVO> param) {\n        FillCompositeWrapper fillCompositeWrapper = new FillCompositeWrapper();\n        PageDTO<${className}DTO> pageDTO = $!{serviceName}.listPage(param.getData());\n        fillCompositeWrapper.addFillData(\"data1\", pageDTO.getRecords());\n        return fillCompositeWrapper;\n    }\n#else\n\n    /**\n    * 分页查询${comments}后导出excel\n    *\n    * @param param 分页对象\n    */\n    @PostMapping(\"/export\")\n    @ApiOperation(value = \"导出${comments}\", notes = \"导出${comments}\", produces = \"application/octet-stream\")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name = \"param\", value = \"查询条件\", required = true)\n    })\n    public void export(@RequestBody ReqBody<${className}PageVO> param, HttpServletResponse response) {\n        param.getData().setCurrent(1L);\n        param.getData().setSize(PublicConstants.Excel.DEFAULT_MAX_EXPORT_TOTAL);\n        PageDTO<${className}DTO> pageDTO = $!{serviceName}.listPage(param.getData());\n        File file = ${serviceName}.export(pageDTO);\n        DownloadUtil.downloadFileThenDelete(response, file);\n    }\n#end\n}\n"},{"name":"Entity.java.vm","code":"/*\n * Copyright © ${year} PCI Technology Group Co.,Ltd. All Rights Reserved.\n * Site: http://www.pcitech.com/\n * Address：PCI Intelligent Building, No.2 Xincen Fourth Road, Tianhe District, Guangzhou，China（Zip code：510653）\n */\n##导入宏定义\n$!{define.vm}\n\n$!{init.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"PO\")\n\n##保存文件（宏定义）\n#save(\"/model/po\", \"PO.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"model.po\")\n\n##定义包路径\n#set($package = $!{tableInfo.savePackageName})\n\n##定义类名\n#set($className = $!{tableInfo.name})\n\n##初始化列状态\n#initColumnState()\n\n##自动导入包（全局变量）\n$!autoImport\nimport com.baomidou.mybatisplus.annotation.TableField;\nimport com.baomidou.mybatisplus.annotation.TableName;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport com.suntek.common.dao.base.BasePO;\n#if(${hasBigDecimalColumn})\nimport java.math.BigDecimal;\n#end\n#if(${hasDateColumn})\nimport cn.hutool.core.date.DatePattern;\nimport com.fasterxml.jackson.annotation.JsonFormat;\n#end\nimport java.util.Date;\n\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.NoArgsConstructor;\n\n##表注释（宏定义）\n#tableComment(\"实体类\")\n@Data\n@NoArgsConstructor\n@TableName(\"${tableInfo.obj.name}\")\n@ApiModel(description = \"${tableInfo.comment}\")\n@EqualsAndHashCode(callSuper = true)\npublic class ${className}PO extends BasePO {\n\n    private static final long serialVersionUID = 1L;\n\n    #foreach ($column in $tableInfo.fullColumn)\n    /**\n     * $!{column.comment}\n     */\n    #if($pk.name == $column.name)\n    @TableId\n    #else\n    @TableField(\"$column.obj.name\")\n    #end\n    #if($!{column.shortType} == \"Date\")\n    @JsonFormat(pattern = DatePattern.NORM_DATETIME_PATTERN, timezone = \"Asia/Shanghai\")\n    #end\n    @ApiModelProperty(value = \"$!{tool.escapeDoubleQuotes($!{column.comment})}\")\n    private $!{column.shortType} $!{column.name};\n\n    #end\n\n}\n"},{"name":"EntityDTO.java.vm","code":"/*\n * Copyright © ${year} PCI Technology Group Co.,Ltd. All Rights Reserved.\n * Site: http://www.pcitech.com/\n * Address：PCI Intelligent Building, No.2 Xincen Fourth Road, Tianhe District, Guangzhou，China（Zip code：510653）\n */\n##导入宏定义\n$!{define.vm}\n\n$!{init.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"DTO\")\n\n##保存文件（宏定义）\n#save(\"/model/dto\", \"DTO.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"model.dto\")\n\n##定义包路径\n#set($package = $!{tableInfo.savePackageName})\n\n##定义类名\n#set($className = $!{tableInfo.name})\n\n##初始化列状态\n#initColumnState()\n\n##自动导入包（全局变量）\n$!autoImport\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport com.alibaba.excel.metadata.data.FormulaData;\nimport com.alibaba.excel.metadata.data.WriteCellData;\nimport com.suntek.common.core.base.BaseDTO;\n#if(${hasBigDecimalColumn})\nimport java.math.BigDecimal;\n#end\n#if(${hasDateColumn})\nimport cn.hutool.core.date.DatePattern;\nimport com.fasterxml.jackson.annotation.JsonFormat;\n#end\n#if(${hasDictColumn})\nimport com.suntek.common.core.annotation.DictParam;\n#end\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport java.util.Date;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n\n##表注释（宏定义）\n#tableComment(\"数据传输类\")\n@Data\n@ApiModel(description = \"${tableInfo.comment}\" )\n@EqualsAndHashCode(callSuper = true)\npublic class ${className}DTO extends BaseDTO {\n    private static final long serialVersionUID = 1L;\n\n    #foreach ($column in $tableInfo.fullColumn)\n    /**\n     * $!{column.comment}\n     */\n    #if($!{column.shortType} == \"Date\")\n    @JsonFormat(pattern = DatePattern.NORM_DATETIME_PATTERN, timezone = \"Asia/Shanghai\" )\n    #end\n    #if($!{column.ext.get(\"dictType\")})\n    @DictParam(dictType = \"$!{column.ext.get(\"dictType\")}\", dictNameFiled = \"$!{column.name}View\")\n    #end\n    @ApiModelProperty(value = \"$!{tool.escapeDoubleQuotes($!{column.comment})}\" )\n    private $!{column.shortType} $!{column.name};\n\n    #if($!{column.ext.get(\"dictType\")})\n    /**\n     * $!{column.comment}字典说明\n     */\n    @ApiModelProperty(value = \"$!{tool.escapeDoubleQuotes($!{column.comment})}字典说明\" )\n    private String $!{column.name}View;\n\n    #end\n    #end\n\n    /**\n     * excel row\n     */\n    @ApiModelProperty(value = \"导出使用\" , hidden = true)\n    @JsonIgnore\n    private transient WriteCellData<String> idx;\n\n    public ${className}DTO() {\n        WriteCellData<String> formula = new WriteCellData<>();\n        FormulaData formulaData = new FormulaData();\n        formulaData.setFormulaValue(\"ROW()-1\" );\n        formula.setFormulaData(formulaData);\n        idx = formula;\n    }\n}\n"},{"name":"EntityPageVO.java.vm","code":"/*\n * Copyright © ${year} PCI Technology Group Co.,Ltd. All Rights Reserved.\n * Site: http://www.pcitech.com/\n * Address：PCI Intelligent Building, No.2 Xincen Fourth Road, Tianhe District, Guangzhou，China（Zip code：510653）\n */\n##导入宏定义\n$!{define.vm}\n\n$!{init.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"PageVO\")\n\n##保存文件（宏定义）\n#save(\"/model/vo\", \"PageVO.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"model.vo\")\n\n##定义包路径\n#set($package = $!{tableInfo.savePackageName})\n\n##定义类名\n#set($className = $!{tableInfo.name})\n\n##初始化列状态\n#initColumnState()\n\n##自动导入包（全局变量）\n$!autoImport\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport com.suntek.common.core.base.BasePageVO;\n#if(${hasBigDecimalColumn})\nimport java.math.BigDecimal;\n#end\n#if(${hasDateColumn})\nimport cn.hutool.core.date.DatePattern;\nimport com.fasterxml.jackson.annotation.JsonFormat;\n#end\nimport java.util.Date;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.NoArgsConstructor;\n\n##表注释（宏定义）\n#tableComment(\"分页值对象类\")\n@Data\n@NoArgsConstructor\n@ApiModel(description = \"${tableInfo.comment}\" )\n@EqualsAndHashCode(callSuper = true)\npublic class ${className}PageVO extends BasePageVO {\n    private static final long serialVersionUID = 1L;\n\n    #foreach ($column in $tableInfo.fullColumn)\n    /**\n     * $!{column.comment}\n     */\n    #if($!{column.shortType} == \"Date\")\n    @JsonFormat(pattern = DatePattern.NORM_DATETIME_PATTERN, timezone = \"Asia/Shanghai\" )\n    #end\n    @ApiModelProperty(value = \"$!{tool.escapeDoubleQuotes($!{column.comment})}\" )\n    private $!{column.shortType} $!{column.name};\n\n    #end\n}\n"},{"name":"EntityVO.java.vm","code":"/*\n * Copyright © ${year} PCI Technology Group Co.,Ltd. All Rights Reserved.\n * Site: http://www.pcitech.com/\n * Address：PCI Intelligent Building, No.2 Xincen Fourth Road, Tianhe District, Guangzhou，China（Zip code：510653）\n */\n##导入宏定义\n$!{define.vm}\n\n$!{init.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"VO\")\n\n##保存文件（宏定义）\n#save(\"/model/vo\", \"VO.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"model.vo\")\n\n##定义包路径\n#set($package = $!{tableInfo.savePackageName})\n\n##定义类名\n#set($className = $!{tableInfo.name})\n\n##初始化列状态\n#initColumnState()\n\n##自动导入包（全局变量）\n$!autoImport\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport com.suntek.common.core.base.BaseVO;\n#if(${hasBigDecimalColumn})\nimport java.math.BigDecimal;\n#end\n#if(${hasDateColumn})\nimport cn.hutool.core.date.DatePattern;\nimport com.fasterxml.jackson.annotation.JsonFormat;\n#end\nimport java.util.Date;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.NoArgsConstructor;\n\n##表注释（宏定义）\n#tableComment(\"值对象类\")\n@Data\n@NoArgsConstructor\n@ApiModel(description = \"${tableInfo.comment}\" )\n@EqualsAndHashCode(callSuper = true)\npublic class ${className}VO extends BaseVO {\n    private static final long serialVersionUID = 1L;\n\n    #foreach ($column in $tableInfo.fullColumn)\n    /**\n     * $!{column.comment}\n     */\n    #if($!{column.shortType} == \"Date\")\n    @JsonFormat(pattern = DatePattern.NORM_DATETIME_PATTERN, timezone = \"Asia/Shanghai\" )\n    #end\n    @ApiModelProperty(value = \"$!{tool.escapeDoubleQuotes($!{column.comment})}\" )\n    private $!{column.shortType} $!{column.name};\n\n    #end\n}\n"},{"name":"Mapper.java.vm","code":"/*\n * Copyright © ${year} PCI Technology Group Co.,Ltd. All Rights Reserved.\n * Site: http://www.pcitech.com/\n * Address：PCI Intelligent Building, No.2 Xincen Fourth Road, Tianhe District, Guangzhou，China（Zip code：510653）\n */\n##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Mapper\")\n\n##保存文件（宏定义）\n#save(\"/mapper\", \"Mapper.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"mapper\")\n\n##定义包路径\n#set($package = $!{tableInfo.savePackageName})\n\n##定义类名\n#set($className = $!{tableInfo.name})\n\n$!autoImport\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport org.apache.ibatis.annotations.Mapper;\nimport ${package}.model.po.${className}PO;\n\n##表注释（宏定义）\n#tableComment(\"映射类\")\n@Mapper\npublic interface ${className}Mapper extends BaseMapper<${className}PO> {\n\n}\n"},{"name":"Mapper.xml.vm","code":"##引入mybatis支持\n$!{mybatisSupport.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Mapper.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##定义包路径\n#set($package = $!{tableInfo.savePackageName})\n\n##定义类名\n#set($className = $!{tableInfo.name})\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"${package}.mapper.${className}Mapper\">\n  <resultMap id=\"${className}Map\" type=\"${package}.model.po.${className}PO\">\n    #foreach($column in $tableInfo.fullColumn)\n      <result property=\"${column.name}\" jdbcType=\"${column.ext.jdbcType}\" column=\"${column.obj.name}\"/>\n    #end\n  </resultMap>\n\n</mapper>\n"},{"name":"Service.java.vm","code":"/*\n * Copyright © ${year} PCI Technology Group Co.,Ltd. All Rights Reserved.\n * Site: http://www.pcitech.com/\n * Address：PCI Intelligent Building, No.2 Xincen Fourth Road, Tianhe District, Guangzhou，China（Zip code：510653）\n */\n##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Service\")\n\n##保存文件（宏定义）\n#save(\"/service\", \"Service.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service\")\n\n##定义包路径\n#set($package = $!{tableInfo.savePackageName})\n\n##定义类名\n#set($className = $!{tableInfo.name})\n\n##定义注释内容\n#set($comments = $!{tableInfo.comment})\n\n##初始化列状态\n#initColumnState()\n\n##定义实体对象名\n#set($entityName = $!tool.firstLowerCase($!tableInfo.name))\n\n$!autoImport\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport ${package}.model.po.${className}PO;\nimport ${package}.model.dto.${className}DTO;\nimport ${package}.model.vo.${className}PageVO;\nimport ${package}.model.vo.${className}VO;\nimport com.suntek.common.dao.base.PageDTO;\n#if(!$callback.exportExcelWithTemplate)\nimport java.io.File;\n#end\nimport java.util.Collection;\n\n##表注释（宏定义）\n#tableComment(\"服务定义层\")\npublic interface ${className}Service extends IService<${className}PO> {\n\n    /**\n     * 分页查询${comments}\n     *\n     * @param vo 分页对象\n     * @return PageDTO<${className}DTO>\n     */\n    PageDTO<${className}DTO> listPage(${className}PageVO vo);\n\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $!{tableInfo.pkColumn.get(0)})\n    /**\n     * 根据主键编号获取${comments}\n     *\n     * @param ${pk.name} 主键编号\n     */\n    ${className}DTO detail($!{pk.shortType} ${pk.name});\n#end\n\n    /**\n     * 新增${comments}\n     *\n     * @param vo 新增对象\n     * @return PageDTO<${className}DTO>\n     */\n    boolean add(${className}VO vo);\n\n    /**\n     * 批量新增${comments}\n     *\n     * @param voList 新增对象列表\n     * @return PageDTO<${className}DTO>\n     */\n    boolean addBatch(Collection<${className}VO> voList);\n#if(!$callback.exportExcelWithTemplate)\n    /**\n     * 导出${comments}\n     *\n     * @param pageDTO 分页对象\n     */\n    File export(PageDTO<${className}DTO> pageDTO);\n#end\n\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $!{tableInfo.pkColumn.get(0)})\n    #if($hasStatusColumn)\n    /**\n     * 根据主键编号逻辑删除${comments}\n     *\n     * @param $!{pk.name} 主键编号\n     */\n    boolean logicalRemoveById($!{pk.shortType} $!{pk.name});\n\n    /**\n     * 根据主键编号集合批量逻辑删除${comments}\n     *\n     * @param idList 主键编号集合\n     */\n    boolean logicalRemoveByIds(Collection<$!{pk.shortType}> idList);\n    #end\n#end\n}\n"},{"name":"ServiceImpl.java.vm","code":"/*\n * Copyright © ${year} PCI Technology Group Co.,Ltd. All Rights Reserved.\n * Site: http://www.pcitech.com/\n * Address：PCI Intelligent Building, No.2 Xincen Fourth Road, Tianhe District, Guangzhou，China（Zip code：510653）\n */\n##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Service\")\n\n##保存文件（宏定义）\n#save(\"/service/impl\", \"ServiceImpl.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service.impl\")\n\n##定义包路径\n#set($package = $!{tableInfo.savePackageName})\n\n##定义类名\n#set($className = $!{tableInfo.name})\n\n##定义注释内容\n#set($comments = $!{tableInfo.comment})\n\n##初始化列状态\n#initColumnState()\n\n##定义实体对象名\n#set($entityName = $!tool.firstLowerCase($!tableInfo.name))\n\n$!autoImport\nimport cn.hutool.core.bean.BeanUtil;\nimport cn.hutool.core.date.DatePattern;\nimport cn.hutool.core.date.DateUtil;\nimport cn.hutool.core.lang.Assert;\nimport cn.hutool.core.util.ObjectUtil;\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\n#if(${hasStatusColumn})\nimport com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;\n#end\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.baomidou.mybatisplus.core.toolkit.Wrappers;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.Maps;\nimport com.suntek.common.core.constant.PublicConstants;\nimport ${package}.model.po.${className}PO;\nimport ${package}.model.dto.${className}DTO;\nimport ${package}.model.vo.${className}PageVO;\nimport ${package}.model.vo.${className}VO;\nimport ${package}.mapper.${className}Mapper;\nimport ${package}.service.${className}Service;\nimport com.suntek.common.core.util.CopyUtil;\nimport com.suntek.common.dao.base.PageDTO;\nimport com.suntek.common.dao.util.PageUtil;\n#if(!$callback.exportExcelWithTemplate)\nimport com.suntek.common.export.service.delegate.NormalExcelExportDelegate;\n#end\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport lombok.extern.slf4j.Slf4j;\nimport com.suntek.common.core.annotation.TranslateDict;\n\nimport java.util.Collection;\nimport java.util.Date;\n#if(!$callback.exportExcelWithTemplate)\nimport java.io.File;\n#end\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.stream.Collectors;\n\n##表注释（宏定义）\n#tableComment(\"服务实现层\")\n@Service\n@Slf4j\npublic class ${className}ServiceImpl extends ServiceImpl<${className}Mapper, ${className}PO> implements ${className}Service {\n\n    @Override\n    @TranslateDict\n    public PageDTO<${className}DTO> listPage(${className}PageVO vo) {\n        LambdaQueryWrapper<${className}PO> condition = Wrappers.lambdaQuery(CopyUtil.toBean(vo, ${className}PO.class));\n        #if(${hasStatusColumn})\n        condition.eq(${className}PO::getStatus, PublicConstants.STATUS.S0A);\n        #end\n        IPage<${className}PO> pageResult = baseMapper.selectPage(PageUtil.page(vo), condition);\n        return PageDTO.toPage(pageResult, ${className}DTO.class);\n    }\n\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $!{tableInfo.pkColumn.get(0)})\n    @Override\n    public ${className}DTO detail($!{pk.shortType} ${pk.name}) {\n        Assert.notNull(${pk.name}, \"查询ID不允许为空\");\n        ${className}PO po = baseMapper.selectById(${pk.name});\n        if (ObjectUtil.isEmpty(po)) {\n            return null;\n        }\n        return CopyUtil.toBean(po, ${className}DTO.class);\n    }\n#end\n\n    @Override\n    public boolean add(${className}VO vo) {\n        if (null == vo) {\n            return false;\n        }\n        ${className}PO po = CopyUtil.toBean(vo, ${className}PO.class);\n        #if(${hasStatusColumn})\n        //默认数据有效\n        po.setStatus(PublicConstants.STATUS.S0A);\n        #end\n        return super.save(po);\n    }\n\n    @Transactional(\n            rollbackFor = {Exception.class}\n    )\n    @Override\n    public boolean addBatch(Collection<${className}VO> voList) {\n        if (null == voList || voList.isEmpty()) {\n            return false;\n        }\n        List<${className}PO> poList = CopyUtil.copyList(voList, ${className}PO.class);\n        #if(${hasStatusColumn})\n        //默认数据有效\n        poList.forEach(po -> po.setStatus(PublicConstants.STATUS.S0A));\n        #end\n        return super.saveBatch(poList);\n    }\n\n#if(!$callback.exportExcelWithTemplate)\n    @Override\n    public File export(PageDTO<${className}DTO> pageDTO) {\n        List<${className}DTO> records = pageDTO.getRecords();\n        List<Map<String, Object>> listMap = records.stream().map(BeanUtil::beanToMap).collect(Collectors.toList());\n        AtomicInteger count = new AtomicInteger(1);\n        listMap.forEach(map -> {\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n                if (entry.getValue() instanceof Date) {\n                    entry.setValue(DateUtil.formatDateTime((Date) entry.getValue()));\n                }\n            }\n            map.put(\"no\", count.getAndIncrement());\n        });\n        Map<String, String> header = ImmutableMap.<String, String>builder()\n                .put(\"no\", \"序号\")\n            #foreach ($column in $tableInfo.fullColumn)\n                #if($!callback.truncateComment)\n                .put(\"$!{column.name}\", \"$!tool.escapeDoubleQuotes($!tool.getFirstFragment($!column.comment))\")\n                #else\n                .put(\"$!{column.name}\", \"$!tool.escapeDoubleQuotes($!column.comment)\")\n                #end\n            #end\n                .build();\n\n        String fileName = \"${comments}导出-\" + DateUtil.format(new Date(), DatePattern.PURE_DATETIME_PATTERN);\n        return NormalExcelExportDelegate.dataSyncExport(listMap, Maps.newLinkedHashMap(header), fileName);\n    }\n#end\n\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $!{tableInfo.pkColumn.get(0)})\n    #if($hasStatusColumn)\n    @Override\n    public boolean logicalRemoveById(${pk.shortType} ${pk.name}) {\n            ${className}PO updateOne = new ${className}PO();\n        updateOne.setId(id);\n        //设置为逻辑删除\n        updateOne.setStatus(PublicConstants.STATUS.S0D);\n        baseMapper.updateById(updateOne);\n\n        return true;\n    }\n\n    @Override\n    public boolean logicalRemoveByIds(Collection<${pk.shortType}> idList) {\n            ${className}PO updateOne = new ${className}PO();\n        //设置为逻辑删除\n        updateOne.setStatus(PublicConstants.STATUS.S0D);\n        LambdaUpdateWrapper<${className}PO> updateWrapper = new LambdaUpdateWrapper<>();\n        updateWrapper.in(${className}PO::getId, idList);\n        baseMapper.update(updateOne, updateWrapper);\n\n        return true;\n    }\n    #end\n#end\n}\n"}]}},"columnConfig":{"Default":{"name":"Default","elementList":[{"title":"disable","type":"BOOLEAN","selectValue":""},{"title":"support","type":"SELECT","selectValue":"add,edit,query,del,ui"},{"title":"dictType","type":"TEXT","selectValue":""}]}},"globalConfig":{"Default":{"name":"Default","elementList":[{"name":"autoImport.vm","value":"##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n#foreach($import in $importList)\nimport $!import;\n#end"},{"name":"define.vm","value":"##（Velocity宏定义）\n\n##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tableInfo.name, $fileName))\n#end\n\n##定义表注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(tableComment $desc)\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})$desc\n *\n * @author $!author\n * @version $!version\n * @since $!date , Version $!version\n */\n#end\n\n##初始化列状态\n#macro(initColumnState)\n    #set($hasStatusColumn = false)\n    #set($hasBigDecimalColumn = false)\n    #set($hasDateColumn = false)\n#foreach($column in $tableInfo.fullColumn)\n    #if($!tool.toLowerCase($!column.name) == \"status\")\n        #set($hasStatusColumn = true)\n    #end\n    #if($!column.shortType == \"BigDecimal\")\n        #set($hasBigDecimalColumn = true)\n    #end\n    #if($!column.shortType == \"Date\")\n        #set($hasDateColumn = true)\n    #end\n    #if($!column.ext.get(\"dictType\"))\n        #set($hasDictColumn = true)\n    #end\n#end\n#end\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end"},{"name":"init.vm","value":"##初始化区域\n\n##去掉表的t_前缀\n##$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\"t_\",\"\")))\n\n##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\n#foreach($column in $tableInfo.fullColumn)\n    #if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n        $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n    #end\n#end\n\n##实现动态排除列\n#set($temp = $tool.newHashSet(\"id\", \"createTime\", \"updateTime\", \"createUser\", \"updateUser\", \"createBy\", \"updateBy\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.fullColumn)\n        #if($column.name!=$item)\n            ##带有反回值的方法调用时使用$tool.call来消除返回值\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##重新保存\n    $tableInfo.setFullColumn($newList)\n#end\n\n##对importList进行篡改\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##带有反回值的方法调用时使用$tool.call来消除返回值\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##覆盖\n#set($importList = $temp)"},{"name":"mybatisSupport.vm","value":"##针对Mybatis 进行支持，主要用于生成xml文件\n#foreach($column in $tableInfo.fullColumn)\n    ##储存列类型\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #else\n        ##其他类型\n        #set($jdbcType=\"VARCHAR\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##定义宏，查询所有列\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end\n"}]}}}